// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//HACER MIGRACIÓN CADA VEZ QUE SE HAGA CAMBIOS AQUÍ npx prisma migrate dev --name init 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum ENUM_TYPE_USER{
  USER_MAIN
  ADMIN
  TESTER
}

model FT_USER{
  USER_ID Int @id @default(autoincrement())
  USER_FIRSTNAME String @db.VarChar
  USER_LASTNAME String @db.VarChar
  USER_PASSWORD  String @db.VarChar
  USER_EMAIL String @unique @db.VarChar
  USER_TYPE_USER ENUM_TYPE_USER
  USER_PROFILE ENUM_PROFILE?
  USER_ADMIN_ID Int?
  USER_ADMIN FT_USER? @relation("AdminToUser", fields: [USER_ADMIN_ID], references: [USER_ID])
  USER_USERS_RELATION FT_USER[] @relation("AdminToUser")
  logsUser FT_LOG_USER[]    @relation("UserToLogs") // Campo virtual
  logsUserFeature FT_LOG_FEATURE[]    @relation("UserFeatureLog") // Campo virtual
}


enum ENUM_PROFILE{
  BANPAIS
  BIPA
  BIESV
}

enum ENUM_STATUS_FEATURE{
  ON
  OFF
}

model FT_FEATURE{
  FTRE_ID Int @id @default(autoincrement())
  FTRE_NAME String @unique @db.VarChar
  FTRE_LINE String @db.VarChar
  FTRE_PROFILE ENUM_PROFILE
  FTRE_STATUS ENUM_STATUS_FEATURE
  logs FT_LOG_FEATURE[]    @relation("FeatureToLogs") // Campo virtual
}


model FT_LOG_FEATURE{
  LOGF_ID Int @id @default(autoincrement())
  LOGF_DATE_TIME DateTime @default(now())
  LOGF_DETAILS String @db.VarChar

  // Clave foránea y relación
  FTRE_ID        Int         // Campo físico en la DB
  feature        FT_FEATURE  @relation("FeatureToLogs", fields: [FTRE_ID], references: [FTRE_ID])
  USER_ID Int
  user FT_USER  @relation("UserFeatureLog", fields: [USER_ID], references: [USER_ID])
}

model FT_LOG_USER{
  LOGU_ID Int @id @default(autoincrement())
  LOGU_DATE_TIME DateTime @default(now())
  LOGU_DETAILS String @db.VarChar

    // Clave foránea y relación
  USER_ID        Int         // Campo físico en la DB
  user       FT_USER  @relation("UserToLogs", fields: [USER_ID], references: [USER_ID])
}